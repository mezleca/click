name: build-and-release

on:
    workflow_dispatch:
        inputs:
            version:
                description: "release version (e.g v2.0.0)"
                required: true
                type: string
            build_target:
                description: "build target"
                required: true
                default: "both"
                type: choice
                options:
                    - "both"
                    - "linux-only"
                    - "windows-only"
            action_type:
                description: "action type"
                required: true
                default: "draft"
                type: choice
                options:
                    - "draft"
                    - "publish"
                    - "build-only"

jobs:
    build-linux:
        runs-on: ubuntu-latest
        if: ${{ github.event.inputs.build_target == 'both' || github.event.inputs.build_target == 'linux-only' }}
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        steps:
            - name: checkout
              uses: actions/checkout@v5

            - name: install system dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                      dpkg-dev \
                      build-essential \
                      libxi-dev \
                      libx11-dev \
                      libxext-dev \
                      libgl1-mesa-dev \
                      libglu1-mesa-dev \
                      libglfw3-dev \
                      libglew-dev \
                      xorg-dev \
                      libxkbcommon-dev

            - name: ensure build script perms
              run: chmod +x ./elter.sh

            - name: configure
              run: ./elter.sh --configure

            - name: build linux binary
              run: ./elter.sh --build

            - name: check if binary exists
              run: |
                  if [ ! -f "build/elterclick" ]; then
                      echo "binary not found!"
                      exit 1
                  fi

            - name: upload linux artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: linux-build
                  path: |
                      build/elterclick

    build-windows:
        runs-on: windows-latest
        if: ${{ github.event.inputs.build_target == 'both' || github.event.inputs.build_target == 'windows-only' }}
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        steps:
            - name: checkout
              uses: actions/checkout@v5

            - name: Choco help
              uses: crazy-max/ghaction-chocolatey@v3
              with:
                  args: -h

            - name: Setup cmake
              uses: jwlawson/actions-setup-cmake@v2
              with:
                  cmake-version: '3.16.x'

            - name: Use cmake
              run: cmake --version

            - name: install system dependencies
              run: |
                  choco install mingw -y

            - name: configure
              run: powershell ./elter.ps1 --configure

            - name: build windows binary
              run: powershell ./elter.ps1 --build

            - name: check if binary exists
              run: |
                  if (!(Test-Path "build/elterclick.exe")) {
                      Write-Error "Error: Binary not found!"
                      exit 1
                  }

            - name: upload linux artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: windows-build
                  path: |
                      build/elterclick.exe

    create-release:
        needs: [build-linux, build-windows]
        runs-on: ubuntu-latest
        if: |
            always() && 
            (needs.build-linux.result == 'success' || needs.build-linux.result == 'skipped') &&
            (needs.build-windows.result == 'success' || needs.build-windows.result == 'skipped') &&
            (github.event.inputs.action_type == 'draft' || github.event.inputs.action_type == 'publish')
        steps:
            - name: checkout
              uses: actions/checkout@v5

            - name: get version
              id: get_version
              run: |
                  echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

            - name: download linux artifacts
              if: ${{ needs.build-linux.result == 'success' }}
              uses: actions/download-artifact@v5
              with:
                  name: linux-build
                  path: artifacts/

            - name: download windows artifacts
              if: ${{ needs.build-windows.result == 'success' }}
              uses: actions/download-artifact@v5
              with:
                  name: windows-build
                  path: artifacts/

            - name: create draft release
              if: ${{ github.event.inputs.action_type == 'draft' }}
              uses: softprops/action-gh-release@v2
              with:
                  name: ${{ steps.get_version.outputs.VERSION }}
                  tag_name: ${{ steps.get_version.outputs.VERSION }}
                  draft: true
                  prerelease: true
                  generate_release_notes: true
                  files: |
                      ./artifacts/*
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: create published release
              if: ${{ github.event.inputs.action_type == 'publish' }}
              uses: softprops/action-gh-release@v2
              with:
                  name: ${{ steps.get_version.outputs.VERSION }}
                  tag_name: ${{ steps.get_version.outputs.VERSION }}
                  draft: false
                  prerelease: true
                  generate_release_notes: true
                  files: |
                      ./artifacts/*
                  token: ${{ secrets.GITHUB_TOKEN }}